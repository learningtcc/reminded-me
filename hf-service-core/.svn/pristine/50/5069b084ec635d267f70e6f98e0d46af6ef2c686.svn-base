package com.homefellas.dao.cassandra.core;

import java.lang.reflect.Field;
import java.nio.ByteBuffer;
import java.util.UUID;

import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import org.apache.cassandra.thrift.Cassandra;
import org.apache.cassandra.thrift.Cassandra.Client;
import org.apache.cassandra.thrift.Column;
import org.apache.cassandra.thrift.ColumnParent;
import org.apache.cassandra.thrift.ConsistencyLevel;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;

public class CassandraDao
{
	private String cassandraHost = "localhost";
	private int cassandraPort = 9160;
	private String keyspace = "rm";
	
	

	protected <T> T execute(ICassandraCallback<T> action)
	{
		TTransport tr = null;
		try
		{
			tr = new TFramedTransport(new TSocket(cassandraHost, cassandraPort));
			TProtocol proto = new TBinaryProtocol(tr);
			Cassandra.Client client = new Cassandra.Client(proto);
			tr.open();
			
			return action.doInCassandra(client);
			
		}
		catch (Exception teException)
		{
			teException.printStackTrace();
		}
		finally
		{
			if (tr!=null)
				tr.close();
		}
		
		return null;
		
		
	}
	
	
//	public AbstractModel get(String id)
//	{
//		try
//		{
//			try
//			{
//				getConnection();
//				String columnFamily = "Profiles";
//				ColumnParent columnParent = new ColumnParent(columnFamily);
//				
//				SlicePredicate predicate = new SlicePredicate();
//				predicate.setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[0]), ByteBuffer.wrap(new byte[0]), false, 100));
//				List<ColumnOrSuperColumn> columnsByKey = client.get_slice(ByteBuffer.wrap(id.getBytes()), columnParent, predicate, ConsistencyLevel.ALL);
//				Profile profile = new Profile();
//				profile.setId(id);
//				Member member = new Member();
//				member.setId(id);
//				profile.setMember(member);
//				for (ColumnOrSuperColumn column:columnsByKey)
//				{
//					String name = new String(column.getColumn().getName());
//					if (name.equals("name"))
//						profile.setName(new String(column.getColumn().getValue()));
//					else if (name.equals("email"))
//						profile.getMember().setEmail(new String(column.getColumn().getValue()));
//					else if (name.equals("password"))
//						profile.getMember().setPassword(new String(column.getColumn().getValue()));
//						
//				}
//				
//				return profile;
//			}
//			catch (InvalidRequestException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			catch (UnavailableException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			catch (TimedOutException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			catch (TException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			return null;
//		}
//		finally
//		{
//			closeConnection();
//		}
//	}
	
	public <T> T save(final T model)
	{
		
		
		return execute(new ICassandraCallback<T>() {

			@Override
			public T doInCassandra(Client client)
					throws Exception
			{

				client.set_keyspace(keyspace);
				
				long timestamp = System.currentTimeMillis();
				String pk = UUID.randomUUID().toString();
				String columnFamily = model.getClass().getSimpleName();
				
				ColumnParent columnParent = new ColumnParent(columnFamily);
				
				Class<?> clazz = model.getClass();
				Field[] fields = clazz.getDeclaredFields();
				for (Field field:fields)
				{
					Transient transient1 = field.getAnnotation(Transient.class);
					if (transient1!=null)
						continue;
					
					OneToOne oneToOne = field.getAnnotation(OneToOne.class);
					ManyToOne manyToOne = field.getAnnotation(ManyToOne.class);
					if (oneToOne != null || manyToOne != null)
					{
						return doInCassandra(client);
					}
					else
					{
						String attribute = field.getName();
						String methodName = "get"+attribute.substring(0, 1).toUpperCase()+attribute.substring(1);
						String value = clazz.getMethod(methodName, null).invoke(model, null).toString();
						Column column = new Column(ByteBuffer.wrap(attribute.getBytes()));
						column.setTimestamp(timestamp);
						column.setValue(value.getBytes());
						
						client.insert(ByteBuffer.wrap(pk.getBytes()), columnParent,column,ConsistencyLevel.ALL) ;
					}
				}
				
				return model;
			
			}

			
		});
	}
	
//	public void insert(Profile profile)
//	{
//		try
//		{
//			profile.setId(UUID.randomUUID().toString());
//			
//			long timestamp = System.currentTimeMillis();
//			  
//			String columnFamily = "Profiles";
//			Column name = new Column(ByteBuffer.wrap("name".getBytes()));
//			name.setTimestamp(timestamp);
//			name.setValue(profile.getName().getBytes());
//			
//			Column email = new Column(ByteBuffer.wrap("email".getBytes()));
//			email.setTimestamp(timestamp);
//			email.setValue(profile.getMember().getEmail().getBytes());
//			
//			Column password = new Column(ByteBuffer.wrap("password".getBytes()));
//			password.setTimestamp(timestamp);
//			password.setValue(profile.getMember().getPassword().getBytes());
//			
//			ColumnParent columnParent = new ColumnParent(columnFamily);
//			try
//			{
//				getConnection();
//				
//				client.insert(ByteBuffer.wrap(profile.getId().getBytes()), columnParent,name,ConsistencyLevel.ALL) ;
//				client.insert(ByteBuffer.wrap(profile.getId().getBytes()), columnParent,email,ConsistencyLevel.ALL) ;
//				client.insert(ByteBuffer.wrap(profile.getId().getBytes()), columnParent,password,ConsistencyLevel.ALL) ;
//			}
//			catch (InvalidRequestException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			catch (UnavailableException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			catch (TimedOutException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			catch (TException e)
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
//		finally
//		{
//			closeConnection();
//		}
//	}
	
}
